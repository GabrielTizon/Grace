version: '3.8'

services:
  auth-api:
    build: ./auth-api
    container_name: auth-api
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_NAME=mydb
      - DB_USER=user
      - DB_PASS=password
      - REDIS_HOST=redis
    expose:
      - "9001"

  nginx:
    image: nginx:latest
    container_name: nginx-auth
    networks:
      - app-network
    depends_on:
      - auth-api
    volumes:
      - ./auth-api/nginx.conf:/etc/nginx/nginx.conf
      - ./auth-api/src/public:/app/public
    ports:
      - "9000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/register"]
      interval: 30s
      timeout: 10s
      retries: 3

  record-api:
    build: ./record-api
    container_name: record-api
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - DB_HOST=db
      - DB_NAME=mydb
      - DB_USER=user
      - DB_PASS=password
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3

  receive-send-api:
    build: ./receive-send-api
    container_name: receive-send-api
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - JWT_SECRET=shawarma
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:16.4
    container_name: db
    networks:
      - app-network
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4
    container_name: redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
