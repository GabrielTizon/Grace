services:
  auth-api:
    build: ./auth-api
    container_name: auth-api
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    expose:
      - "9001"
    healthcheck:
      test: ["CMD", "sh", "-c", "php-fpm -t >/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:latest
    container_name: nginx-auth
    networks:
      - app-network
    depends_on:
      - auth-api
    volumes:
      - ./auth-api/nginx.conf:/etc/nginx/nginx.conf
      - ./auth-api/src/public:/app/public
    ports:
      - "9003:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  record-api:
    build: ./record-api
    container_name: record-api
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: .env
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  receive-send-api:
    build: ./receive-send-api
    container_name: receive-send-api
    networks:
      - app-network
    depends_on:
      redis: { condition: service_healthy }
    env_file: .env
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  receive-send-worker:
    build: ./receive-send-api
    container_name: rs-worker
    command: ["node", "src/worker.js"]
    networks:
      - app-network
    depends_on:
      rabbitmq: { condition: service_healthy }
      record-api: { condition: service_healthy }
    env_file: .env

  db:
    image: postgres:16.4
    container_name: db
    networks:
      - app-network
    env_file: .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4
    container_name: redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management   # traz UI na porta 15672
    container_name: rabbitmq
    networks:
      - app-network
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"     # protocolo AMQP
      - "15672:15672"   # interface web
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
